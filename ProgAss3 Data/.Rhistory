}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeDataGrouped = split(bestOutcomeData, bestOutcomeData$State)
head(bestOutcomeDataGrouped, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
bestOutcomeData = lapply(bestOutcomeData, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
ans = lapply(bestOutcomeData, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
ans = lapply(bestOutcomeData, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
moo = split(bestOutcomeData, bestOutcomeData$State)
ans = lapply(moo, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
moo = split(bestOutcomeData, bestOutcomeData$State)
ans = lapply(moo, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Mortality, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
bestOutcomeData = lapply(bestOutcomeData, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Mortality, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
bestOutcomeData = lapply(bestOutcomeData, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Mortality, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
#head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
bestOutcomeData = lapply(bestOutcomeData, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Mortality, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
return ( data.frame(hospital=unlist(bestOutcomeData), state=names(bestOutcomeData)) )
#head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
rankall <- function(outcome, num = "best") {
## Read outcome data
colMask <- c("NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	NA,	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL",	"NULL")
bestOutcomeData <- read.csv(file="outcome-of-care-measures.csv",sep=",", colClasses = colMask, header = TRUE, stringsAsFactors = FALSE)
## Check that outcome is valid
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
##  Set column index based on outcome
outcomeIndex <- 3  #  Default
if (outcome == "heart failure") {
outcomeIndex <- 4
}
if (outcome == "pneumonia") {
outcomeIndex <- 5
}
##  Cast type for sought outcome values only
suppressWarnings(bestOutcomeData[,outcomeIndex] <- as.double(bestOutcomeData[,outcomeIndex]))
## Remove rows with NA outcomes values from consideration
bestOutcomeData <- bestOutcomeData[complete.cases(bestOutcomeData[,outcomeIndex]),]
bestOutcomeData <- bestOutcomeData[,c(1,2,outcomeIndex)]
names(bestOutcomeData)[3] = "Mortality"
bestOutcomeData = split(bestOutcomeData, bestOutcomeData$State)
bestOutcomeData = lapply(bestOutcomeData, function(x, num) {
x = x[order(x$Mortality, x$Hospital.Name),]
if (num == "best") {
num <- 1
}
if (num == "worst") {
num <- nrow(x)
}
return (x$Hospital.Name[num])
}, num)
return ( data.frame(hospital=unlist(bestOutcomeData), state=names(bestOutcomeData)) )
#head(bestOutcomeData, 4)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the ## (abbreviated) state name
}
rankall("heart failure")
submit()
library("submit")
library(submit)
head(rankall("heart attack", 20), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
?rpois
?rnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
rep(0:1, each = 5)
rnorm(10, 0, 20)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
