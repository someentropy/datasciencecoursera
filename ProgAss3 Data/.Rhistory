)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- lapply(data, solve) #solve(data, ...)
lapply(inv, x$setInv)#x$setInv(inv)
inv
}
x<-cacheSolve(meow)
x
Sys.time()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(yourMatrix) {
x <<- yourMatrix
inv <<- NULL
}
get <- function() {
inv
}
setInv <- function(solve) {
inv <<- solve
}
getInv <- function() {
inv
}
list(
set = set,
get = get,
setInv = setInv,
getInv = getInv
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- lapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
x
x<-cacheSolve(meow)
x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(yourMatrix) {
x <<- yourMatrix
inv <<- NULL
}
get <- function() {
inv
}
setInv <- function(solve) {
inv <<- solve
}
getInv <- function() {
inv
}
list(
set = set,
get = get,
setInv = setInv,
getInv = getInv
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- sapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
x<-cacheSolve(meow)
x
meow
meow$getInv()
A
moo <- makeCacheMatrix(A)
moo$get()
moo$set(A)
moo$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(yourMatrix) {
x <<- yourMatrix
inv <<- NULL
}
get <- function() {
x
}
setInv <- function(solve) {
inv <<- solve
}
getInv <- function() {
inv
}
list(
set = set,
get = get,
setInv = setInv,
getInv = getInv
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- sapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
moo$get()
moo$set(A)
moo$get()
moo$get()
moo$set(A)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(yourMatrix) {
x <<- yourMatrix
inv <<- NULL
}
get <- function() x
setInv <- function(solve) {
inv <<- solve
}
getInv <- function() {
inv
}
list(
set = set,
get = get,
setInv = setInv,
getInv = getInv
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- sapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
moo$set(A)
moo$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(yourMatrix) {
x <<- yourMatrix
inv <<- NULL
}
get <- function() x
setInv <- function(solve) {
inv <<- solve
}
getInv <- function() {
inv
}
list(
set = set,
get = get,
setInv = setInv,
getInv = getInv
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- sapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
A <- matrix(c(11,2,13,4,15,6,17,8,19), nrow = 3, ncol = 3, byrow = T)
myMake <- makeCacheMatrix(A)
View(A)
myMake$get()
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- lapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- apply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
print(data)
inv <- lapply(data, solve) #solve(data, ...)
sapply(inv, x$setInv)#x$setInv(inv)
inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
print(data)
#inv <- lapply(data, solve) #solve(data, ...)
#sapply(inv, x$setInv)#x$setInv(inv)
#inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
print(data)
#inv <- lapply(data, solve) #solve(data, ...)
#sapply(inv, x$setInv)#x$setInv(inv)
#inv
}
cacheSolve(myMake)
myMake$get()
myMake$getInv()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
print(1)
#inv <- lapply(data, solve) #solve(data, ...)
#sapply(inv, x$setInv)#x$setInv(inv)
#inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
print(1)
#inv <- lapply(data, solve) #solve(data, ...)
#sapply(inv, x$setInv)#x$setInv(inv)
#inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
print(data)
#inv <- lapply(data, solve) #solve(data, ...)
#sapply(inv, x$setInv)#x$setInv(inv)
#inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
solve(data, ...)
x$setInv(inv)
inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
solve(data)#, ...)
x$setInv(inv)
inv
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
solve(data)#, ...)
x$setInv(inv)
inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
inv <- solve(data)#, ...)
x$setInv(inv)
inv
}
cacheSolve(myMake)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
#if (!is.null(inv)) {
#    message("getting cached data")
#    return(inv)
#}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
cacheSolve(myMake)
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
rnorm(10)
matrix(rnorm(9), nrow = 3, ncol = 3)
A<-matrix(rnorm(9), nrow = 3, ncol = 3)
makeCacheMatrix(A)
myWyf <- makeCacheMatrix(A)
cacheSolve(myWyf)
A<-matrix(rnorm(100), nrow = 10, ncol = 10)
myWyf <- makeCacheMatrix(A)
cacheSolve(myWyf)
A<-matrix(rnorm(400), nrow = 20, ncol = 20)
myWyf <- makeCacheMatrix(A)
A<-matrix(rnorm(400), nrow = 20, ncol = 20)
myWyf <- makeCacheMatrix(A)
cacheSolve(myWyf)
cacheSolve(myWyf)
A<-matrix(rnorm(2500), nrow = 50, ncol = 50)
myWyf <- makeCacheMatrix(A)
cacheSolve(myWyf)
myWyf$set(matrix(rnorm(2500), nrow = 50, ncol = 50))
cacheSolve(myWyf)
myWyf$set(matrix(rnorm(10000), nrow = 100, ncol = 100))
cacheSolve(myWyf)
myWyf$set(matrix(rnorm(1000000), nrow = 1000, ncol = 1000))
cacheSolve(myWyf)
myWyf$set(matrix(rnorm(1000000), nrow = 1000, ncol = 1000))
sol <- cacheSolve(myWyf)
sol <- cacheSolve(myWyf)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
sol <- cacheSolve(myWyf)
sol <- cacheSolve(myWyf)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
inv
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
sol <- cacheSolve(myWyf)
sol
x <- 5
x
v <- c(1,2,3)
v
v * 2
?cars
cars
mean(cars$speed)
?plot
plot(cars$speed, cars$dist)
x<- c(rnorm(10), runif(10), rnorm(10, 1))
x
?gl
f<- gl(3,10)
f
x <- data.frame(Category=factor(c("First", "First", "First", "Second",
"Third", "Third", "Second")),
Frequency=c(10,15,5,2,14,20,3))
x
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[<1]
tf <- num_vect[num_vect < 1]
tf <- num_vect < 1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "someentropy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
setwd("C:/Users/markd_3zbz90v/Documents/ProgAss3 Data")
